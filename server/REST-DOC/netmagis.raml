/pggroups
    description: Collection of users for internal authentication
    /{pggroupId}
/pgusers
    description: Collection of groups for internal authentication
    /{pguserId}
/config
    description: Collection of configuration parameters
    /{configId}
/groups
    description: Collection of Netmagis groups
    /{groupId}
	description: a Netmagis group
	/users
	    description: Collection of Netmagis users belonging to a group
	    /{userId}
		description: a user belonging to a given group
	/permissions
	    description: Collection of all permissions for a given group
	    /views
		description: Collection of allowed views for a group
		/{viewId}
		    description: Permission on a view for a group
	    /domains
		description: Collection of allowed domains for a group
		/{domainId}
		    description: Permission on a domain for a group
	    /dhcpprofiles
		description: Collection of allowed DHCP profiles for a group
		/{dhcpprofileId}
		    description: Permission on a DHCP profile for a group
	    /addresses
		description: Collection of allowed IP addresses for a group
		/{cidr}
		    description: Permission on an IP address for a group
	    /networks
		description: Collection of allowed networks for a group
		/{networkId}
		    description: Permission on a network for a group
	    /equipments
		description: Collection of allowed equipments for a group
		/{equipmentId}
		    description: Permission on an equipment for a group
	    /vlans
		description: Collection of allowed VLANs without IP address for a group
		/{vlanId}
		    description: Permission on a VLAN without IP address for a group
/sessions
    description: Collection of sessions
    get:
	description: Get all my sessions
	queryParameters:
	    active:
		description: if present, restrict collection to active (1) or expired (0) sessions
		required: false
		default: only active sessions
	body:
    post:
	description: Create a new session
	queryParameters: (none)
	body:
	    application/json:
		example: |
		    {
			login: myusername
			password: mypassword
		    }
	responses:
	    200:
		body:
		    text/plain: ok
	    412:
		description: invalid input (json format, invalid login)
	    403:
		description: login failed or session already opened
	    429:
		description: account or IP temporarily blocked
	    500:
		description: temporary failure
    delete:
	description: Remove current session
	queryParameters: (none)
	body: (none)
	responses:
	    200:
		body:
		    text/plain: ok

/domains
    description: Collection of domains
    get:
	description: Get a list of allowed domains
	queryParameters:
	    mailrole:
		description: Restrict list to domains with mailrole permission
		required: false
		default: "no"
		type: boolean
		example: "yes"
	responses:
	    200:
		body:
		    application/json:
			example: |
			    "domains": [
				{
				    "iddom": 5,
				    "name": "example.com"
				},
				{
				    "iddom": 19,
				    "name": "example.org"
				}
			    ]

/dhcpranges
    description: Collection of dynamic DHCP ranges
    get:
	description: get all DHCP ranges allowed for my group for a given addr
	queryParameters:
	    cidr:
		required: true
		type: cidr
		example: 198.51.100.0/24
	    responses:
		200:
		    body:
			application/json:
			    example: |
				[
				    {
					iddhcprange: 1
					min: 198.51.100.10
					max: 198.51.100.20
					iddom: 2
					default_lease_time: null
					max_lease_time: 3600
					iddhcpprof: 3
				    },
				    ...
				]
    post:
	description: add a new DHCP range
	queryParameters: none
	request:		XXX
	    application/json:
		example:
		    {
			min: 198.51.100.10
			max: 198.51.100.20
			iddom: 2
			default_lease_time: null
			max_lease_time: 3600
			iddhcpprof: 3
		    }
	    note: no iddhcprange is given
	responses:
	    200:
		body:
		    application/json:
			example:
			    {
				min: 198.51.100.10
				max: 198.51.100.20
				iddom: 2
				default_lease_time: null
				max_lease_time: 3600
				iddhcpprof: 3
			    }
    /{iddhcprange}:
	description: one dynamic DHCP range
	put:
	    description: updates an existing DHCP range
	    request:		XXX
		application/json
		    example:
			{
			    min: 198.51.100.10
			    max: 198.51.100.20
			    iddom: 2
			    default_lease_time: null
			    max_lease_time: 3600
			    iddhcpprof: 3
			}
	    responses:
		200:
		    body: empty
	delete:
	    description: deletes an existing DHCP range
	    request:		XXX
		body: empty
	    responses:
		200:
		    body: empty





/dhcpprofiles
    description: Collection of DHCP profiles
    get:
	description: get all DHCP profiles allowed for my group, sorted
	queryParameters:
	    (none)
	request:
	    body: empty
	responses:
	    200:
		body:
		    application/json:
			example:
			    [
				{
				    iddhcpprof: 5
				    name: "x terminal"
				},
				{
				    iddhcpprof: 1
				    name: "iq laser printer"
				}
			    ]
    /{iddhcpprof}:
	description: one DHCP profile
	get:
	    description: get one specific DHCP profile
	    queryParameters:
		(none)
	    request:
		body: empty
	    responses:
		200:
		    {
			iddhcpprof: 1
			name: "iq laser printer"
		    }

/networks
    /{networkId}
/communities
    /{communityId}
/organizations
    /{organizationId}
/hinfos
    description: Collection of machine types (HINFO)
    /{hinfoId}
	description: A machine type (HINFO)
/search
    description: Collection of search results
    get:
	description:
	queryParameters:
	    q:
		required: true
		type: string
		example: "foo"
	responses:
	    200:
		body:
		    application/json:
			example: |
			    [
				{
				    type: "domain",
				    link: "/domains/5"
				},
				{
				    type: "name",
				    link: "/views/3/names/123"
				},
				{
				    type: "name",
				    link: "/views/27/names/456"
				}
			    ]
/zones
    description: Collection of zones
    get:
	description:
	queryParameters:
	    name:
		required: false
		type: string
		example: "168.192.in-addr.arpa"
	    view:
		required: false
		type: string
		example: "internal"
	    modified:
		required: false
		type: boolean (0/1)
		example: 1
    /{zoneId}
	description: zone parameters or zone file ready for ISC-BIND/Unbound/etc
	get:
	    description: zone parameters (name, prologue, etc.) only
	    queryParameters:
	    responses:
		200:
		    body:
			application/json:
			    example: |
				{
				    name: "example.com.internal",
				    view: "/views/5",
				    version: 19700101120005,
				    prologue: "...",
				    rrsup: "...",
				    gen: 0
				}
	post:
	    description: generated zone file, ready for production use
	    queryParameters:
		format:
		    required: true
		    type: string
		    example: bind/unbound/...
		update:
		    required: false
		    type: 0/1
		    example: 0
		    description: 1=reset the "gen" flag. 0=don't change it
	    responses:
		200:
		    body:
			text/plain:
			"..."

/views
    description: Collection of views
    get:
	responses:
	    200:
		body:
		    application/json:
			example:
			    [
				{
				    name: "internal",
				    link: "/views/5",
				    sort: 100,
				    selected: 1
				},
				{
				    name: "external",
				    link: "/views/7",
				    sort: 200,
				    selected: 0
				}
			    ]




    /{viewId}
	description: A single view
	get:
	    description: Get a list of allowed views
	    queryParameters: 
	    responses:
		200:
		    body:
			application/json:
			    example:
				{
				    name: "external",
				    sort: 200,
				    selected: 0
				}

	/zones
	    description: Collection of zones
	    /{zoneId}
	/relays
	    description: Collection of mail relays
	    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX <--- TO DISCUSS LATER
	    /{domainId}
		description: mail relays for a given domain



/names
    description: A collection of names
    get:
	queryParameters:
	    view:
		description: filter on view name
		type: string
		required: false
	    name:
		description: filter on name
		type: string
		required: false
	    domain:
		description: filter on domain name
		type: string
		required: false
	    addr:
		description: filter on IP address
		type: cidr (v4 or v6)
		required: false
	    sort:		# XXX BUG
		description: sort result
		type: comma-separated list of {name, domain, addr, view}
		required: false
	responses:
	    200:
		body:
		    application/json:	# list of RR
			example: |
			    [ 
				{
				    idrr: 123,
				    name: www,
				    iddom: 1,
				    domain: example.org,
				    idview: 1,
				    view: internal
				},
				{
				    idrr: 456,
				    name: foo,
				    iddom: 2,
				    domain: example.com
				    idview: 2
				    view: external
				}
			    ]
    post:
	description: Create a new name
	queryParameters: (none)
	body:
	    application/json:
		{
		    fqdn:
		    idview:
		    (see /names/{id})
		}
	responses:
	    200:
		body:
		    application/json:
			{
			    idrr:
			    fqdn:
			    idview:
			}
	    403:
		description: login failed
	    429:
		description: temporary failure
    /{idrr}
	description: Get a single name
	get:
	    responses:
		200:
		    body:
			application/json:
			    example: |
				{
				    name: "atlas",
				    domain: "example.org",
				    domainlink: "/domain/5",
				    view: "external",
				    viewlink: "/views/5",
				    mac: "00:11:22:33:44:55",
				    hinfo: "pc/unix",
				    hinfolink: "/hinfos/12",
				    comment: "Simon's PC",
				    respname: "John Doe",
				    respmail: "doe@example.org",
				    dhcpprofile: "diskless",
				    dhcpprofilelink: "/dhcpprofiles/33",
				    sendsmtp: "1",
				    ttl: "3600",
				    user: "jane",
				    userlink: "/users/17",
				    cname: "other.example.org",  <exclusive with MX or addr>
				    cnamelink: "/names/82",
				    lastmod: "<time_t>"
				    addr: [
					"192.0.2.12",
					"2001:db8::1",
					"198.51.100.24",
				    ],
				    mx: [
					{
					    prio: 100,
					    fqdn: "mx1.example.com",
					    link: "/names/532"
					},
					{
					    prio: 200,
					    fqdn: "mx2.example.com",
					    link: "/names/79"
					}
				    ],
				}
	put:
	delete:






/names
    description: Get a collection of names
    get:
	acceptParameters:
	    application/json
	    application/pdf
	    application/csv
	queryParameters:
	    view:
		required: false
		type: view name
		example: default
	    name:
		required: false
		type: host name (without domain)
		example: www
	    domain:
		required: false
		type: domain name
		example: example.org
	    context:
		required: false
		type: string
		values: "host", "existing-host", "alias", "del-name", "mx", \
			"add-mailaddr", "del-mailaddr"
		note: this parameter may be used only when view/name/domain \
		    are present
	    cidr:
		required: false
		type: IPv4 or IPv6 CIDR
		example: 193.51.100.0/24
	    XXX TODO: draw a table with valid parameter combinations
	    format: pdf, csv, ... ?
	responses:
	    200:
		body:
		    application/json:
		    application/pdf:
		    application/csv:
	    404: Not found
	    403: Forbidden 
    /{nameId}
	description: Get a single name
	get:
	    responses:
		200:
		    body:
			application/json:
			    example: |
				{
				    name: "atlas",
				    domain: "example.org",
				    domainlink: "/domain/5",
				    view: "external",
				    viewlink: "/views/5",
				    mac: "00:11:22:33:44:55",
				    hinfo: "pc/unix",
				    hinfolink: "/hinfos/12",
				    comment: "Simon's PC",
				    respname: "John Doe",
	    cidr:
		required: false
		type: IPv4 or IPv6 CIDR
		example: 193.51.100.0/24
	    format: pdf, csv, ... ?
	responses:
	    200:
		body:
		    application/json:
		    application/pdf:
		    application/csv:
    /{nameId}
	description: Get a single name
	get:
	    responses:
		200:
		    body:
			application/json:
			    example: |
				{
				    name: "atlas",
				    domain: "example.org",
				    domainlink: "/domain/5",
				    view: "external",
				    viewlink: "/views/5",
				    mac: "00:11:22:33:44:55",
				    hinfo: "pc/unix",
				    hinfolink: "/hinfos/12",
				    comment: "Simon's PC",
				    respname: "John Doe",
				    respmail: "doe@example.org",
				    dhcpprofile: "diskless",
				    dhcpprofilelink: "/dhcpprofiles/33",
				    sendsmtp: "1",
				    ttl: "3600",
				    user: "jane",
				    userlink: "/users/17",
				    cname: "other.example.org",  <exclusive with MX or addr>
				    cnamelink: "/names/82",
				    lastmod: "<time_t>"
				    addr: [
					"192.0.2.12",
					"2001:db8::1",
					"198.51.100.24",
				    ],
				    mx: [
					{
					    prio: 100,
					    fqdn: "mx1.example.com",
					    link: "/names/532"
					},
					{
					    prio: 200,
					    fqdn: "mx2.example.com",
					    link: "/names/79"
					}
				    ],
				}
